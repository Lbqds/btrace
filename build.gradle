plugins {
    id "com.jfrog.bintray" version "1.7"
}

project.ext.asmVersion = 7.2

def env = System.getenv()

// use gradle.properties to set JAVA_HOME=<your JDK location>
def javaHome = findProperty('JAVA_HOME') ?: env['JAVA_HOME']

subprojects {
    apply from: rootProject.file('common.gradle')
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
        subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(':btrace-core') {
    dependencies {
        // https://mvnrepository.com/artifact/org.jctools/jctools-core
        compile(group: 'org.jctools', name: 'jctools-core', version: '2.1.1')

        // https://mvnrepository.com/artifact/org.ow2.asm/asm
        compile(group: 'org.ow2.asm', name: 'asm', version: "${rootProject.asmVersion}")
        compile(group: 'org.ow2.asm', name: 'asm-util', version: "${rootProject.asmVersion}")
    }
}

project(':btrace-services-api') {
    dependencies {
        compile project(':btrace-core')
    }
}

project(':btrace-services') {
    dependencies {
        compile project(':btrace-core')
        compile project(':btrace-services-api')
    }
}

project(':btrace-statsd') {
    dependencies {
        compile project(':btrace-core')
        compile project(':btrace-services-api')
    }
}

project(':btrace-instr') {
    dependencies {
        compile(group: 'org.ow2.asm', name: 'asm', version: "${rootProject.asmVersion}")
        compile(group: 'org.ow2.asm', name: 'asm-tree', version: "${rootProject.asmVersion}")
        compile group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
        compile project(':btrace-core')
        compile project(':btrace-runtime')
        compile project(':btrace-compiler')
        compile project(':btrace-statsd')
        testCompile project(':btrace-client')
    }
}

project(':btrace-agent') {
    dependencies {
        compile project(':btrace-runtime')
        compile project(':btrace-instr')
    }
}

project(':btrace-client') {
    dependencies {
        compile project(':btrace-core')
        compile project(':btrace-compiler')
    }
}

project(':btrace-compiler') {
    dependencies {
        compile files("${javaHome}/lib/tools.jar")
        compile project(path: ':btrace-core')
        compile project(path: ':btrace-runtime')
    }
}

project(':btrace-agent') {
    dependencies {
        compile files("${javaHome}/lib/tools.jar")
    }
}

project(':btrace-dtrace') {
    dependencies {
        compile project(':btrace-core')
    }
}

project(':btrace-dist') {
    dependencies {
        compile project(':btrace-agent')
        compile project(':btrace-client')
        compile project(':btrace-compiler')
    }
}

// Support for releasing to BinTray; see https://github.com/bintray/gradle-bintray-plugin
// Add 'gradle.properties' file containing the following properties:
// * bintray.user
// * bintray.key
// * gpg.passphrase
bintray {
    user = project.hasProperty("bintray.user") ? project.property("bintray.user") : System.getenv('BINTRAY_USER')
    key = project.hasProperty("bintray.key") ? project.property("bintray.key") : System.getenv('BINTRAY_API_KEY')

    publications = ['agent', 'client', 'boot']

    dryRun = System.properties['bintrayUpload'] != null ? !(Boolean.getBoolean('bintrayUpload')) : true
    publish = true

    pkg {
        repo = 'maven'
        name = 'btrace'
        desc = 'BTrace'
        userOrg = 'btraceio'
        websiteUrl = 'https://github.com/btraceio/btrace'
        issueTrackerUrl = 'https://github.com/btraceio/btrace/issues'
        vcsUrl = 'https://github.com/btraceio/btrace.git'
        licenses = ['GPL-2.0+CE']
        labels = []
        publicDownloadNumbers = true
        version {
            name = project.version //Bintray logical version name
            released  = new java.util.Date()
            vcsTag = 'v' + project.version
            //Optional configuration for GPG signing
            gpg {
                sign = project.hasProperty("gpg.passphrase") //Determines whether to GPG sign the files. The default is false
                passphrase = sign ? project.property("gpg.passphrase") : "" //Optional. The passphrase for GPG signing'
            }
        }
    }
}

def pomDetails = {
    resolveStrategy = Closure.DELEGATE_FIRST
    url 'https://github.com/btraceio/btrace'
    scm {
        url 'https://github.com/btraceio/btrace'
        connection 'scm:git:https://github.com/btraceio/btrace.git'
        developerConnection 'scm:git:https://github.com/btraceio/btrace.git'
    }
    licenses {
        license {
            name 'GNU General Public License, version 2, with the Classpath Exception'
            url 'http://openjdk.java.net/legal/gplv2+ce.html'
        }
    }
    developers {
        developer {
            id 'yardus'
            name 'Jaroslav Bachorik'
            email 'j.bachorik@btrace.io'
        }
    }
}